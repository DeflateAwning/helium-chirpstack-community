upstream backend {
   server helium:8081;
}
upstream chirpstack {
   server chirpstack:8080;
}
upstream chirpstack-api {
   server chirpstack-rest-api:8090;
}
map $arg_override $override {
   true chirpstack;
   default front;
}
server {
    listen 80;
    listen [::]:80;

    server_name console.foo.bar;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://www.foo.bar$request_uri;
    }
}

server {
    listen 443 default_server ssl http2;
    listen [::]:443 ssl http2;

    server_name console.foo.bar;

    ssl_certificate /etc/nginx/ssl/live/foo.bar/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/foo.bar/privkey.pem;
    
    location ~ ^(/console/) {
         proxy_pass http://backend$request_uri;
         proxy_redirect  off;
         proxy_set_header        X-Real-IP $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header        Host $http_host;
    }

    location ~ ^(/front/|/_nuxt/|/_loading/|/__webpack_hmr/|/static/front/) {
         root /var/www/front;
    }

    location = / {
         if ( $override = "front" ) { return 301 /front/; }
         proxy_pass http://chirpstack$request_uri;
         proxy_redirect  off;
         proxy_set_header        X-Real-IP $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header        Host $http_host;
    }

    location / {
         proxy_pass http://chirpstack$request_uri;
         proxy_redirect  off;
         proxy_set_header        X-Real-IP $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header        Host $http_host;
    }

    location ~ ^/rest-api/ {
         rewrite ^/rest-api/(.*) /$1 break;
         proxy_pass http://chirpstack-api;
         proxy_redirect  off;
         proxy_set_header        X-Real-IP $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header        Host $http_host;
    }

}